plugins {
  id "io.freefair.lombok" version "4.1.2"
}

group 'com.fortify.fpr.to.sonarqube'

apply plugin: 'java'

ext {
    jacksonVersion = "2.10.0"
}


// plugin version, note the version must match versionRegex.
version = '1.0'

repositories {
    // repository with fortify artifacts
    maven {
        url  "http://dl.bintray.com/fortify/maven-public"
    }
    mavenCentral()
}

configurations {
    compileExport
    compile.extendsFrom (compileExport)
}

test {
    useJUnitPlatform()
}

dependencies {
    // plugin specific dependencies
    compileExport(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "$jacksonVersion") { transitive = false }
    compileExport(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion") { transitive = false }
    compileExport(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "$jacksonVersion") { transitive = false }
    compileExport(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: "$jacksonVersion") {transitive = true }
    
    compileExport(group: 'org.apache.commons', name: 'commons-lang3', version: "3.9") { transitive = false }
    compileExport(group: 'commons-codec', name: 'commons-codec', version: '1.13') { transitive = false }
    compileExport(group: 'commons-io', name: 'commons-io', version: '2.6') { transitive = false }
    compileExport(group: 'org.mapdb', name: 'mapdb', version: '3.0.7') { transitive = true }
    
    //testImplementation 'org.junit.platform:junit-jupiter-api:5.3.1'
    
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1')
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: "1.1.0")
    testRuntimeOnly(group: 'org.junit.jupiter', name:'junit-jupiter-engine', version: '5.3.1')
    testRuntimeOnly(group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1')
}

jar {
    // include files from compileExport dependencies
    from { configurations.compileExport.collect { it.isDirectory() ? it : zipTree(it).matching { exclude('META-INF/*', '/*.txt', '/*.html') } } }
}

