/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.fprtosonarqube.domain.fvdl;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.annotation.JsonNaming;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;

@Getter @ToString @EqualsAndHashCode 
@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
public class FvdlVulnerability implements Serializable {
	private static final long serialVersionUID = 1L;
	private ClassInfo classInfo;
	private InstanceInfo instanceInfo;
	private AnalysisInfo analysisInfo;

	@Getter @ToString @EqualsAndHashCode
	@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
	public static final class ClassInfo implements Serializable {
		private static final long serialVersionUID = 1L;
		private String classID;
		private String type;
		private String subtype;
		private Float defaultSeverity;
	}
	
	@Getter @ToString @EqualsAndHashCode
	@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
	public static final class InstanceInfo implements Serializable {
		private static final long serialVersionUID = 1L;
		private String instanceID;
		private Float instanceSeverity;
		private Float confidence;
	}
	
	@Getter @ToString @EqualsAndHashCode
	@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
	public static final class AnalysisInfo implements Serializable {
		private static final long serialVersionUID = 1L;
		private Unified unified;
	}
	
	@Getter @ToString @EqualsAndHashCode
	@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
	public static final class Unified implements Serializable {
		private static final long serialVersionUID = 1L;
		//private Context context;
		private Trace trace;
	}
	
	@Getter @ToString @EqualsAndHashCode
	@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
	public static final class Context implements Serializable {
		private static final long serialVersionUID = 1L;
		private SourceLocation functionDeclarationSourceLocation;
	}
	
	@Getter @ToString @EqualsAndHashCode
	@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
	public static final class Trace implements Serializable {
		private static final long serialVersionUID = 1L;
		private Primary primary;
	}
	
	@Getter @ToString @EqualsAndHashCode
	@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
	public static final class Primary implements Serializable {
		private static final long serialVersionUID = 1L;
		@JacksonXmlProperty(localName = "Entry")
		@JacksonXmlElementWrapper(useWrapping = false)
	    private List<Entry> entries;
		
		public Entry getDefaultEntry() {
			Optional<Entry> matchingObject = entries.stream().
				    filter(p -> p.node==null?false:p.node.isDefault).
				    findFirst();
			return matchingObject.orElse(entries.size()==0?null:entries.get(0));
		}
	}
	
	@Getter @ToString @EqualsAndHashCode
	@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)
	public static final class Entry implements Serializable {
		private static final long serialVersionUID = 1L;
		private Node node;
		private NodeRef nodeRef;
	}
	
	@Getter @ToString @EqualsAndHashCode
	public static final class Node implements Serializable {
		private static final long serialVersionUID = 1L;
		@JacksonXmlProperty(isAttribute=true) private String id;
		@JacksonXmlProperty(isAttribute=true) private boolean isDefault;
		@JsonProperty("SourceLocation") private SourceLocation sourceLocation;
	}
	
	@Getter @ToString @EqualsAndHashCode
	public static final class NodeRef implements Serializable {
		private static final long serialVersionUID = 1L;
		@JacksonXmlProperty(isAttribute=true) private String id;
	}
	
	@Getter @ToString @EqualsAndHashCode
	public static final class SourceLocation implements Serializable {
		private static final long serialVersionUID = 1L;
		@JacksonXmlProperty(isAttribute=true) private String path;
		@JacksonXmlProperty(isAttribute=true) private Integer line;
		@JacksonXmlProperty(isAttribute=true) private Integer lineEnd;
		@JacksonXmlProperty(isAttribute=true) private Integer colStart;
		@JacksonXmlProperty(isAttribute=true) private Integer colEnd;
	}
}
